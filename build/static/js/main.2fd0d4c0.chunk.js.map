{"version":3,"sources":["request.js","axios.js","components/Row.js","components/Banner.js","components/Navbar.js","App.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fd0d4c0.chunk.js","sourcesContent":["// Add API key for Request from TMDB\nconst API_KEY = \"11a062bed860125b5c9a9e7002ef4591\";\n\nconst requests = {\n    fetchTrending: `/trending/all/wekk?api_key=${API_KEY}&languages=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\n\nexport default requests; \n\n","import axios from \"axios\";\n\n// base url to make requests to the Movie DB\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {            \n    // create a state for movies\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    \n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n    // console.table(movies);\n\n    const handleClick = (movie) => {\n        // handle if trailer is already opened -> close the trailer\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n\n            })\n            .catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        // src={`${base_url}${\n                        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n                        // }`} \n                        className=\"row__poster\"\n                        src={`${base_url}${movie.poster_path}`}\n                        alt={movie.name} />\n                ))}\n            </div>\n\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row;\n","import React, { useState, useEffect } from 'react'\nimport axios from '../axios';\nimport requests from \"../request\"\nimport \"./Banner.css\"\n\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals)\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]            \n            );\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    // console.log(movie);\n\n    // truncate = shorten duration or exten of to reduce amount of text in description and adds \"...\" for descriptions longer than n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n                backgroundPosition: \"center center\"\n            }}\n        > \n\n            <div className=\"banner__contents\">\n                {/* title */}\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n \n                {/* Buttons */}\n                <div className=\"banner_buttons\">\n                    <button className=\"banner__button\"> Play </button>                    \n                    <button className=\"banner__button\"> My List </button>\n                </div>\n\n                {/* Description */}\n                <h1 className=\"banner__description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>                \n            </div>\n\n            <div className=\"banner--fadeBottom\" />  {/* invisable banner */}\n\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react';\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n\n    // create a state for the navbar scroll function \n    const [show, handleShow] = useState(false);\n\n    // add a scroll listener to display the navbar background color\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>            {/* String Concatenation - if show state is true past 100px, we append the navblack class styling */}\n            <img   \n                className=\"nav__logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n                alt=\"Netflix Logo\"\n            />\n\n            <img \n                className=\"nav__avatar\"\n                src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/84c20033850498.56ba69ac290ea.png\"\n                alt=\"Netflix avatar\"\n            />\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from \"react\";\nimport './App.css';\nimport requests from \"./request\";\n\nimport Row from './components/Row';\nimport Banner from './components/Banner';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow={true}\n      />\n\n      {/* <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} /> */}\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}