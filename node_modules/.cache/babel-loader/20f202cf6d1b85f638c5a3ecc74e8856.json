{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/Users/clee/Desktop/Projects/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/clee/Desktop/Projects/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/clee/Desktop/Projects/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from\"../axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;// create a state for movies\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.log(request.data.results);\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);// if [] is blank, code runs once when the component loads \nvar opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};// console.table(movies);\nvar handleClick=function handleClick(movie){// handle if trailer is already opened -> close the trailer\nif(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);}// className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n// src={`${base_url}${\n//     isLargeRow ? movie.poster_path : movie.backdrop_path \n// }`} \n,className:\"row__poster\",src:\"\".concat(base_url).concat(movie.poster_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/Users/clee/Desktop/Projects/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","id"],"mappings":"wjBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC1C;AAD0C,cAEdT,QAAQ,CAAC,EAAD,CAFM,wCAEnCU,MAFmC,eAE3BC,SAF2B,8BAGNX,QAAQ,CAAC,EAAD,CAHF,yCAGnCY,UAHmC,eAGvBC,aAHuB,eAM1CZ,SAAS,CAAC,UAAM,SACGa,CAAAA,SADH,qIACZ,qKAC0BZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEI;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHJ,gCAIWF,OAJX,wDADY,4CAOZF,SAAS,GACZ,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAQgB;AAEhB,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHH,CAAb,CAOA;AAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3B;AACA,GAAGb,UAAH,CAAe,CACXC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAEO,CACHT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACCC,IADD,CACM,SAACC,GAAD,CAAS,CACX,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CAEH,CALD,EAMCkB,KAND,CAMO,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EANP,EAOH,CACJ,CAbD,CAeA,mBACI,aAAK,SAAS,CAAC,KAAf,wBAEI,oBAAK3B,KAAL,EAFJ,cAII,YAAK,SAAS,CAAC,cAAf,UAEKG,MAAM,CAAC2B,GAAP,CAAW,SAAAZ,KAAK,qBACb,YAEI,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EACT;AACA;AACA;AACA;AANJ,CAOI,SAAS,CAAC,aAPd,CAQI,GAAG,WAAKpB,QAAL,SAAgBoB,KAAK,CAACa,WAAtB,CARP,CASI,GAAG,CAAEb,KAAK,CAACC,IATf,EACSD,KAAK,CAACc,EADf,CADa,EAAhB,CAFL,EAJJ,CAoBK3B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EApBnB,GADJ,CAwBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {            \n    // create a state for movies\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    \n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n    // console.table(movies);\n\n    const handleClick = (movie) => {\n        // handle if trailer is already opened -> close the trailer\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get(\"v\"));\n\n            })\n            .catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        // src={`${base_url}${\n                        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n                        // }`} \n                        className=\"row__poster\"\n                        src={`${base_url}${movie.poster_path}`}\n                        alt={movie.name} />\n                ))}\n            </div>\n\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}