{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/clee/Desktop/Projects/netflix-clone/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  // create a state for movies\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  }; // console.table(movies);\n\n  const handleClick = () => {\n    // handle if trailer is already opened -> close the trailer\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      var _movie;\n\n      movieTrailer(((_movie = movie) === null || _movie === void 0 ? void 0 : _movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie) // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n        // src={`${base_url}${\n        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n        // }`} \n        ,\n        className: \"row__poster\",\n        src: `${base_url}${movie.poster_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/clee/Desktop/Projects/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACN,QAAD,CARM,CAAT,CAN0C,CAc1B;;AAEhB,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACR;AACAC,MAAAA,QAAQ,EAAE;AAFF;AAHH,GAAb,CAhB0C,CAwB1C;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtB;AACA,QAAGZ,UAAH,EAAe;AACXC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEO;AAAA;;AACHT,MAAAA,YAAY,CAAC,WAAAqB,KAAK,UAAL,wCAAOC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAS;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AAEH,OALD,EAMCiB,KAND,CAMQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANlB;AAOH;AACJ,GAbD;;AAeA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAK3B;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKG,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACb;AAEI,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF9B,CAGI;AACA;AACA;AACA;AANJ;AAOI,QAAA,SAAS,EAAC,aAPd;AAQI,QAAA,GAAG,EAAG,GAAEpB,QAAS,GAAEoB,KAAK,CAACa,WAAY,EARzC;AASI,QAAA,GAAG,EAAEb,KAAK,CAACC;AATf,SACSD,KAAK,CAACc,EADf;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAJJ,EAoBK3B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YApBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GAnEQb,G;;KAAAA,G;AAqET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {            \n    // create a state for movies\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    \n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n        },\n    };\n    // console.table(movies);\n\n    const handleClick = () => {\n        // handle if trailer is already opened -> close the trailer\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n\n            })\n            .catch((error) => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        // src={`${base_url}${\n                        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n                        // }`} \n                        className=\"row__poster\"\n                        src={`${base_url}${movie.poster_path}`}\n                        alt={movie.name} />\n                ))}\n            </div>\n\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n\n            {/* Container -> Posters */}\n        </div>\n    )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}