{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/clee/Desktop/Projects/netflix-clone/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"../axios\";\nimport \"./Row.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  // create a state for movies\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  }; // console.table(movies);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n        // src={`${base_url}${\n        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n        // }`} \n        className: \"row__poster\",\n        src: `${base_url}${movie.poster_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/clee/Desktop/Projects/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","name","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeW,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUR,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACN,QAAD,CARM,CAAT,CAN0C,CAc1B;;AAEhB,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACR;AACAC,MAAAA,QAAQ,EAAE;AAFF;AAHH,GAAb,CAhB0C,CAwB1C;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAKhB;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEKG,MAAM,CAACc,GAAP,CAAWC,KAAK,iBACb;AAEI;AACA;AACA;AACA;AACA,QAAA,SAAS,EAAC,aANd;AAOI,QAAA,GAAG,EAAG,GAAEpB,QAAS,GAAEoB,KAAK,CAACC,WAAY,EAPzC;AAQI,QAAA,GAAG,EAAED,KAAK,CAACE;AARf,SACSF,KAAK,CAACG,EADf;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA,YAJJ,EAmBKhB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAnBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;;GAnDQb,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"../axios\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {            \n    // create a state for movies\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    \n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); // if [] is blank, code runs once when the component loads \n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n        },\n    };\n    // console.table(movies);\n\n    return (\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                \n                {movies.map(movie => (\n                    <img \n                        key={movie.id} \n                        // className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        // src={`${base_url}${\n                        //     isLargeRow ? movie.poster_path : movie.backdrop_path \n                        // }`} \n                        className=\"row__poster\"\n                        src={`${base_url}${movie.poster_path}`}\n                        alt={movie.name} />\n                ))}\n            </div>\n\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n\n            {/* Container -> Posters */}\n        </div>\n    )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}